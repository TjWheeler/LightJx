{"version":3,"file":"bundle.js","mappings":"gCACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,wFCHvD,MAAMC,UCCN,MACHC,YAAYC,EAAmBC,GAI/B,KAAAC,iBAA2B,YAE3B,KAAAC,SAAmB,EACnB,KAAAC,aAAuB,GAGvB,KAAAC,gBAAsBC,EATlBC,KAAKP,UAAYA,EACjBO,KAAKN,iBAAmBA,CAC5B,CAQUO,KAAKC,GAGX,OAFAF,KAAKJ,SAAU,EACfI,KAAKH,aAAe,GAAGG,KAAKN,kBAAoBM,KAAKP,aAAaS,KAC3D,CACX,CACUC,UAGN,OAFAH,KAAKJ,SAAU,EACfI,KAAKH,aAAe,IACb,CACX,GDrBAL,YAAYC,EAAmBC,GAE3BU,MAAMX,EAAWC,EACrB,CACAW,SAASC,GACL,OAAa,OAAVA,GAA4B,KAAVA,QAAkC,IAAZ,EAChCN,KAAKC,KAAK,eAEdD,KAAKG,SAChB,EEPG,MAAMI,EAAoB,IAHjC,oBACW,KAAAC,sBAAwB,IACnC,GAEO,MAAMC,EACFC,aAAaC,EAAeC,GAC/B,IAAIC,EAAY,IAAIC,EAGpB,OAFAD,EAAUpB,UAAYkB,EACtBE,EAAUnB,iBAAmBkB,EACtBC,CACX,EAEG,MAAMC,EAAb,cAIW,KAAAlB,SAAmB,EACnB,KAAAC,aAAuB,GACvB,KAAAkB,cAA0B,GACzB,KAAAC,YAA2B,EA6BvC,CA5BYC,IAAIJ,GACRb,KAAKgB,YAAYE,KAAKL,EAC1B,CACOM,WAEH,OADAnB,KAAKiB,IAAI,IAAI1B,EAAkBS,KAAKP,UAAWO,KAAKN,mBAC7CM,IACX,CACOK,SAASC,GACZN,KAAKM,MAAQA,EACbN,KAAKe,cAAgB,GACrBf,KAAKH,aAAe,GAEpB,IADA,IAAID,GAAU,EACLwB,EAAI,EAAGA,EAAIpB,KAAKgB,YAAYK,OAAQD,IAAK,CAC9C,IAAIP,EAAYb,KAAKgB,YAAYI,GACjC,IACiBP,EAAUR,SAASL,KAAKM,SAEjCV,GAAU,EACVI,KAAKe,cAAcG,KAAKL,EAAUhB,c,CAExC,MAAOyB,GACLC,QAAQC,MAAMF,GACdtB,KAAKe,cAAcG,KAAK,6BAA6B,E,EAI7D,OADIlB,KAAKe,cAAcM,SAAQrB,KAAKH,aAAeG,KAAKe,cAAcU,KAAKlB,EAAkBC,wBACtFZ,CACX,E","sources":["webpack://Validate/webpack/bootstrap","webpack://Validate/webpack/runtime/define property getters","webpack://Validate/webpack/runtime/hasOwnProperty shorthand","webpack://Validate/webpack/runtime/make namespace object","webpack://Validate/./src/validators/RequiredValidator.ts","webpack://Validate/./src/validators/ValidatorBase.ts","webpack://Validate/./src/Validate.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ValidatorBase } from \"./ValidatorBase\";\r\n\r\nexport class RequiredValidator extends ValidatorBase {\r\n    constructor(fieldName?:string, fieldDisplayName?:string)\r\n    {\r\n        super(fieldName, fieldDisplayName);\r\n    }\r\n    validate(input?:any): boolean {\r\n        if(input === null || input === \"\" || typeof(input) === typeof(undefined)) {\r\n            return this.fail(\"is required\");\r\n        }\r\n        return this.succeed();\r\n    }\r\n}","import { Validator } from \"../Validator\";\r\n\r\n\r\nexport abstract class ValidatorBase implements Validator {\r\n    constructor(fieldName?:string, fieldDisplayName?:string) {\r\n        this.fieldName = fieldName;\r\n        this.fieldDisplayName = fieldDisplayName;\r\n    }\r\n    defaultFieldName: string = \"The Field\";\r\n   // input: any;\r\n    isValid: boolean = false;\r\n    errorMessage: string = \"\";\r\n    fieldName?: string;\r\n    fieldDisplayName?: string;\r\n    expression?: string = undefined;\r\n    protected fail(message:string) : boolean {\r\n        this.isValid = false;\r\n        this.errorMessage = `${this.fieldDisplayName || this.fieldName} ${message}`;\r\n        return false;\r\n    }\r\n    protected succeed() : boolean {\r\n        this.isValid = true;\r\n        this.errorMessage = \"\";\r\n        return true;\r\n    }\r\n    // protected beforeValidate(input?:any, fieldName?:string, fieldDisplayName?:string) {\r\n    //     //this.input = input;\r\n    //     this.fieldName = fieldName;\r\n    //     this.fieldDisplayName = fieldDisplayName;\r\n    // }\r\n    abstract validate(input?:any): boolean;\r\n}\r\n","import { RequiredValidator } from \"./validators/RequiredValidator\";\r\nimport { Validator } from \"./Validator\";\r\nclass ValidationOptions {\r\n    public errorMessageSeperator = \". \";\r\n}\r\nexport const validationOptions = new ValidationOptions();\r\nexport class Validate {\r\n    public static field(name?: string, displayName?: string): ValidatorFluent {\r\n        var validator = new ValidatorFluent();\r\n        validator.fieldName = name;\r\n        validator.fieldDisplayName = displayName;\r\n        return validator;\r\n    }\r\n}\r\nexport class ValidatorFluent {\r\n    public fieldName?: string;\r\n    public fieldDisplayName?: string;\r\n    public input: any;\r\n    public isValid: boolean = false;\r\n    public errorMessage: string = \"\";\r\n    public errorMessages: string[] = [];\r\n    private _validators: Validator[] = [];\r\n    private add(validator: Validator) {\r\n        this._validators.push(validator);\r\n    }\r\n    public required(): ValidatorFluent {\r\n        this.add(new RequiredValidator(this.fieldName, this.fieldDisplayName))\r\n        return this;\r\n    }\r\n    public validate(input: any): boolean {\r\n        this.input = input;\r\n        this.errorMessages = [];\r\n        this.errorMessage = \"\";\r\n        var isValid = true;\r\n        for (var i = 0; i < this._validators.length; i++) {\r\n            var validator = this._validators[i];\r\n            try {\r\n                var result = validator.validate(this.input);\r\n                if (!result) {\r\n                    isValid = false;\r\n                    this.errorMessages.push(validator.errorMessage);\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                this.errorMessages.push(`Error in validator ${typeof (validator)}`);\r\n            }\r\n        }\r\n        if (this.errorMessages.length) this.errorMessage = this.errorMessages.join(validationOptions.errorMessageSeperator);\r\n        return isValid;\r\n    }\r\n}\r\n\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","RequiredValidator","constructor","fieldName","fieldDisplayName","defaultFieldName","isValid","errorMessage","expression","undefined","this","fail","message","succeed","super","validate","input","validationOptions","errorMessageSeperator","Validate","static","name","displayName","validator","ValidatorFluent","errorMessages","_validators","add","push","required","i","length","e","console","error","join"],"sourceRoot":""}